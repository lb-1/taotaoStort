package com.itheima.activemq.queue;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.junit.Test;
import org.springframework.format.number.PercentFormatter;

public class QueueProducer {
	//生产者发送消息
	@Test
	public void send2() throws Exception{
		//第一步 创建connectionFactory 对象，需要指定服务端ip及端口号，
		//brokerURL服务器的ip及端口号
		ConnectionFactory  connectionFactory =
				new ActiveMQConnectionFactory("tcp://192.168.25.130:61616");
		//第二步 使用ConnectionFactory 对象 创建一个connection对象
		Connection connection = connectionFactory.createConnection();
		//第三步 开起连接  调用connection对象得start方法
		connection.start();
		//第四步   使用Connection 对象 创建一个session对象
		//第一个参数  是否开启事务 true 开启事务，第二个参数忽略
		//第二个参数 当第一个参数为false时，才有意义。消息的应答模式，1、自动应答 2、手动应答 一般是自动应答
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		//第五步 使用session对象创建一个Destination对象（topic,queue）
		//此处创建queue对象
		Queue queue = session.createQueue("queue-test");
		//第六步 使用session对象创建一个Producer对象
		MessageProducer producer = session.createProducer(queue);
		//第七步 创建一个Message独享 创建一个TextMEssage对象
		TextMessage message = session.createTextMessage("我是第一个测试MQ的消息");
		//第八步 使用Producer对象 发送消息
		producer.send(message);
		//第九步 关闭资源
		producer.close();
		session.close();
		connection.close();
		
	}
	//生产者发送消息
	@Test
	public void send() throws Exception{
		//1.创建连接的工厂 指定MQ服务器的地址
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://192.168.25.130:61616");
		//2.获取连接  
		Connection connection = connectionFactory.createConnection();		
		//3.开启连接
		connection.start();		
		//4.根据连接对象创建session (提供了操作activmq的方法)
		//第一个参数：表示是否开启分布式事务（JTA）  一般就是false :表示不开启。  只有设置了false ,第二个参数才有意义。
		//第二个参数：表示设置应答模式  自动应答和手动应答  。使用的是自动应答
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		//5.根据session创建目的地（destination）
		Queue queue = session.createQueue("queue-test");
		//6.创建生产者
		MessageProducer producer = session.createProducer(queue);	
		//7.构建消息对象
		TextMessage message = session.createTextMessage("queue发送消息123")	;
		//8.通过生产者发送消息
		producer.send(message);	
		//9.关闭资源
		producer.close();
		session.close();
		connection.close();
	}
}
