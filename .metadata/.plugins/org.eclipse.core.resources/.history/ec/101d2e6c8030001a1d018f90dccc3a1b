package com.taotao.search.service.impl;


import java.io.IOException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.common.SolrInputDocument;
import org.jboss.netty.util.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.taotao.common.pojo.SearchItem;
import com.taotao.common.pojo.SearchResult;
import com.taotao.common.util.TaotaoResult;
import com.taotao.search.dao.SearchDao;
import com.taotao.search.mapper.SerachItemMapper;
import com.taotao.search.service.SearchItemService;

@Service
public class SearchItemServiceImpl implements SearchItemService {

	@Autowired
	private SerachItemMapper mapper;
	
	@Autowired
	private SolrServer solrServer;
	
	@Autowired
	private SearchDao searchDao;
	
	@Override
	public TaotaoResult importAllSearchItems() throws Exception {
		//注入mapper
		//调用mapper方法  查询所有的商品的方法
		List<SearchItem> itemList = mapper.getSearchItemList();
		//通过solrj将数据写入到索引库中
		 //创建httpSolrServer
		 //创建solrImportDocuent  将列表的元素放入索引库
		
		for (SearchItem searchItem : itemList) {
			SolrInputDocument document = new SolrInputDocument();
			//为文档添加域
			document.addField("id", searchItem.getId());
			document.addField("item_title", searchItem.getTitle());
			document.addField("item_sell_point", searchItem.getSell_point());
			document.addField("item_price", searchItem.getPrice());
			document.addField("item_image", searchItem.getImage());
			document.addField("item_category_name", searchItem.getCategory_name());
			document.addField("item_desc", searchItem.getItem_desc());
			// 5、向索引库中添加文档。
			solrServer.add(document);

		}
		
		//提交
		solrServer.commit();		
		return TaotaoResult.ok();
	}

	@Override
	public SearchResult search(String queryString, Integer page, Integer rows) throws Exception {
		
		//创建solrQuery对象
		SolrQuery query = new SolrQuery();
		//设置主查询条件
		if(StringUtils.isNoneBlank(queryString)){
			
			query.setQuery(queryString);
		}else{
			query.setQuery("*:*");
			
		}
		//设置过滤条件
		if(page==null)page=1;
		if(rows==null)rows=60;
		
		query.setStart((page-1)*rows);
		query.setRows(rows);
		
		//设置默认的搜索域
		query.set("df", "item_keywords");
		//设置高亮
		query.setHighlight(true);
		query.setHighlightSimplePre("<em style=\"color:red\">");
		query.setHighlightSimplePost("</em>");
		//设置高亮的域
		query.addHighlightField("item_title");
		//调用Dao方法 返回SearchResult 只包含了总记录数和商品列表
		SearchResult search = searchDao.search(query);
		//设置 SearchResult 的总页数
		long pageCount = 0l;
		pageCount = search.getRecordCount()/rows;
		if(search.getPageCount()%rows>0){
			pageCount++;
		}
		System.out.println("我是总页数"+pageCount);
		search.setPageCount(pageCount);
		// 返回SearchResult
		
		
		return search;
	}

	@Override
	public TaotaoResult updateItemById(Long itemId) throws Exception {
		
		return searchDao.updateItemById(itemId);;
	}

}
