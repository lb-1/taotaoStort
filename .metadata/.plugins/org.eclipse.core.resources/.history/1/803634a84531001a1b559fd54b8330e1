package com.taotao.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taotao.common.pojo.EasyUIDataGridResult;
import com.taotao.common.util.IDUtils;
import com.taotao.common.util.TaotaoResult;
import com.taotao.mapper.TbItemDescMapper;
import com.taotao.mapper.TbItemMapper;
import com.taotao.pojo.TbItem;
import com.taotao.pojo.TbItemDesc;
import com.taotao.pojo.TbItemExample;
import com.taotao.service.ItemService;

@Service
public class ItemServiceImpl implements ItemService {
	// 注入接口
	@Autowired
	private TbItemMapper itemMapper;
	
	@Autowired
	private TbItemDescMapper itemDescMapper;
	
	@Autowired
	private JmsTemplate jmsTemplate;
	

	@Resource(name="queueDestination")
	private Destination topicDestination;

	/**
	 * 查询商品列表 参数 int page int rows 业务逻辑 查询所有商品列表 进行分页处理 返回值 EasyUIDataGridResult
	 */
	@Override
	public EasyUIDataGridResult getItemList(int page, int rows) {

		// 设置分页信息
		PageHelper.startPage(page, rows);
		// 执行查询
		TbItemExample example = new TbItemExample();
		List<TbItem> list = itemMapper.selectByExample(example);

		// 取分页信息
		PageInfo<TbItem> info = new PageInfo<>(list);

		// 创建结果返回对象
		EasyUIDataGridResult result = new EasyUIDataGridResult();
		result.setTotal((int) info.getTotal());
		result.setRows(info.getList());

		return result;
	}
	
	public TaotaoResult saveItemMQ(long itemId,TbItem item, String desc) {

/*		// 生成商品id
		long itemId = IDUtils.genItemId();*/
		// 补全Tbitem对象的属性
		item.setId(itemId);
		// 商品状态 商品状态，1-正常，2-下架，3-删除'
		item.setStatus((byte) 1);
		Date date = new Date();
		item.setCreated(date);
		item.setUpdated(date);
		// 向商品表中插入数据
		itemMapper.insert(item);
		// 4、创建一个TbItemDesc对象
		TbItemDesc itemDesc = new TbItemDesc();
		// 5、补全TbItemDesc的属性
		itemDesc.setItemId(itemId);
		itemDesc.setItemDesc(desc);
		itemDesc.setCreated(date);
		itemDesc.setUpdated(date);
		// 6、向商品描述表插入数据
		itemDescMapper.insert(itemDesc);
		// 7、TaotaoResult.ok()
		return TaotaoResult.ok();

	}
	

	@Override
	public TaotaoResult saveItem(TbItem item, String desc) {

//		// 生成商品id
		final long itemId = IDUtils.genItemId();
//		// 补全Tbitem对象的属性
//		item.setId(itemId);
//		// 商品状态 商品状态，1-正常，2-下架，3-删除'
//		item.setStatus((byte) 1);
//		Date date = new Date();
//		item.setCreated(date);
//		item.setUpdated(date);
//		// 向商品表中插入数据
//		itemMapper.insert(item);
//		// 4、创建一个TbItemDesc对象
//		TbItemDesc itemDesc = new TbItemDesc();
//		// 5、补全TbItemDesc的属性
//		itemDesc.setItemId(itemId);
//		itemDesc.setItemDesc(desc);
//		itemDesc.setCreated(date);
//		itemDesc.setUpdated(date);
//		// 6、向商品描述表插入数据
//		itemDescMapper.insert(itemDesc);
		
		//发送MQ消息  消息内容只包含商品id即可
		TaotaoResult taotaoResult = saveItemMQ(itemId,item,desc);
		if(taotaoResult.getMsg()=="ok"){
			//发送一个商品添加的消息
			System.out.println("我发送消息了");
			jmsTemplate.send(topicDestination,new MessageCreator() {
				
				@Override
				public Message createMessage(Session session) throws JMSException {

					TextMessage message = session.createTextMessage(itemId+"");
					System.out.println("发送的消息是"+itemId);
					return message;
				}
			});
			
		}
	
		// 7、TaotaoResult.ok()
		return TaotaoResult.ok();

	}

}
