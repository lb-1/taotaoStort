package com.itheima.activemq.queue;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.junit.Test;

public class QueueCustomer {
	@Test
	public void recieve2() throws Exception {
		//消费者 接收消息
		//第一步  创建connectionFactory对象
		ConnectionFactory connectionFactory = new 
				ActiveMQConnectionFactory("tep://192.168.25.128:61616");
		
		//第二部  从ConnectionFactory对象中回去connection对象
		Connection connection = connectionFactory.createConnection();
		//第三步   开启连接 调用connection对象的start方法
		connection.start();
		//第四步  使用connection对象获取session对象
		//第一个参数 表示是否使用分布式事务 JTA
		//第二个参数 ： 如果第一个参数为false 第二个参数才有意义  
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		//第五步 使用session对象创建一个Destination（目的地）对象 和发送端保持一致queue 并且队列名称一致
		Queue queue = session.createQueue("queue-test");
		//第六步 使用session创建一个consumer对象
		MessageConsumer consumer = session.createConsumer(queue);
		//第七步 接收消息   
		//第一种
		while(true){
			//接收消息（参数的值表示的是超过一定的时间  以毫秒为单位就开始断开连接）
			Message message = consumer.receive(10000);
			//如果message为空  没有收到消息，就跳出
			if(message == null){
				break;
			}
			
			//ava 中的instanceof 运算符是用来在运行时指出对象是否是特定类的一个实例。
			//instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例。
			if(message instanceof TextMessage){
				TextMessage messget = (TextMessage)message;
				//消息的内容
				System.out.println("获取消息的内容是  "+messget.getText());
			}
			
		}
		System.out.println("start");
		
		//第八步 打印消息
		//第九步 关闭资源。
		consumer.close();
		session.close();
		connection.close();
		
		
	}
	@Test
	public void recieve() throws Exception {
		// 1.创建连接的工厂 指定MQ服务器的地址
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://192.168.25.130:61616");
		// 2.获取连接
		Connection connection = connectionFactory.createConnection();
		// 3.开启连接
		connection.start();
		// 4.根据连接对象创建session (提供了操作activmq的方法)
		// 第一个参数：表示是否开启分布式事务（JTA） 一般就是false :表示不开启。 只有设置了false ,第二个参数才有意义。
		// 第二个参数：表示设置应答模式 自动应答和手动应答 。使用的是自动应答
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		// 5.根据session创建目的地（destination）
		Queue queue = session.createQueue("queue-test");
		// 6.创建消费者;
		MessageConsumer consumer = session.createConsumer(queue);
		//7.接收消息
		
		//第一种接收消息.直接接收  只是测试的使用
		/*while(true){
			//设置接收消息的超时时间 单位是毫秒
			Message receive = consumer.receive(3000000);
			
			if(receive==null){
				break;
			}
			
			//取消息
			if(receive instanceof TextMessage){
				TextMessage message = (TextMessage)receive;
				String text = message.getText();//获取消息的内容
				System.out.println(text);
			}
		}*/
		
		//第二种接收消息.设置一个监听器  就是开启了一个新的线程
		System.out.println("start");
		consumer.setMessageListener(new MessageListener() {
			
			@Override
			public void onMessage(Message message) {
				if(message instanceof TextMessage){
					TextMessage message2 = (TextMessage)message;
					String text="";
					try {
						text = message2.getText();
					} catch (JMSException e) {
						e.printStackTrace();
					}//获取消息的内容
					System.out.println(text);
				}
				System.out.println();
			}
		});
		System.out.println("end");
		//睡眠
		Thread.sleep(10000000);
		
		// 9.关闭资源
		consumer.close();
		session.close();
		connection.close();
	}
}
